// <auto-generated />
using System;
using AppEngine.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClubEngine.ApiService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251026182124_SourceIdTypeMaxLength")]
    partial class SourceIdTypeMaxLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppEngine.Accounting.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ignore")
                        .HasColumnType("bit");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<string>("Info")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("InstructionIdentification")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentsFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawXml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecognizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Repaid_ReadModel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Settled_ReadModel")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId");

                    b.HasIndex("PaymentsFileId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.BookingAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IncomingPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid?>("OutgoingPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentAssignmentId_Counter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PayoutRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncomingPaymentId");

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("OutgoingPaymentId");

                    b.HasIndex("PaymentAssignmentId_Counter");

                    b.HasIndex("PayoutRequestId");

                    b.ToTable("PaymentAssignments", (string)null);
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.IncomingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Charges")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DebitorIban")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DebitorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.ToTable("IncomingPayments", (string)null);
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.OutgoingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Charges")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreditorIban")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreditorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.ToTable("OutgoingPayments", (string)null);
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.PayoutRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IbanProposed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId");

                    b.ToTable("PayoutRequests", (string)null);
                });

            modelBuilder.Entity("AppEngine.Accounting.Iso20022.Camt.PaymentsFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountIban")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BookingsFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BookingsTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid?>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId");

                    b.ToTable("PaymentsFiles", (string)null);
                });

            modelBuilder.Entity("AppEngine.Authentication.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdentityProvider")
                        .HasColumnType("int");

                    b.Property<string>("IdentityProviderUserIdentifier")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AppEngine.Authorization.UsersInPartition.AccessRequests.AccessToPartitionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("RequestReceived")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RequestText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Response")
                        .HasColumnType("int");

                    b.Property<string>("ResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserId_Requestor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId_Responder")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId");

                    b.HasIndex("UserId_Requestor");

                    b.HasIndex("UserId_Responder");

                    b.ToTable("AccessToPartitionsRequests", (string)null);
                });

            modelBuilder.Entity("AppEngine.Authorization.UsersInPartition.UserInPartition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersInPartitions", (string)null);
                });

            modelBuilder.Entity("AppEngine.Configurations.PartitionConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId");

                    b.ToTable("PartitionConfigurations", (string)null);
                });

            modelBuilder.Entity("AppEngine.DomainEvents.PersistedDomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DomainEventId_Parent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid?>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId");

                    b.HasIndex("Timestamp");

                    b.ToTable("DomainEvents", (string)null);
                });

            modelBuilder.Entity("AppEngine.Mailing.ExternalMails.ExternalMail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentPlainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ExternalMailConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Imported")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<string>("MessageIdentifier")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Recipients")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SendGridMessageId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SenderMail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId");

                    b.ToTable("ExternalMails", (string)null);
                });

            modelBuilder.Entity("AppEngine.MenuNodes.MenuNodeReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("PartitionId", "Key")
                        .IsUnique();

                    b.ToTable("MenuNodeReadModels", (string)null);
                });

            modelBuilder.Entity("AppEngine.Partitions.Partition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.ToTable("Clubs");

                    b.HasDiscriminator().HasValue("Partition");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AppEngine.ReadModels.QueryReadModel", b =>
                {
                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("ContentJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QueryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Sequence");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Sequence"));

                    b.HasIndex("QueryName", "PartitionId", "RowId")
                        .IsUnique()
                        .HasFilter("[RowId] IS NOT NULL");

                    b.ToTable("ReadModels", (string)null);
                });

            modelBuilder.Entity("ClubEngine.ApiService.Clubs.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateOnly>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ClubId");

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.ToTable("Periods", (string)null);
                });

            modelBuilder.Entity("ClubEngine.ApiService.Members.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentMembershipTypeId_ReadModel")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ClubId");

                    b.HasIndex("CurrentMembershipTypeId_ReadModel");

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("ClubEngine.ApiService.Members.Memberships.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AnnualFeeOverride")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MembershipTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateOnly>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("MemberId");

                    b.HasIndex("MembershipTypeId");

                    b.ToTable("Memberships", (string)null);
                });

            modelBuilder.Entity("ClubEngine.ApiService.Members.Memberships.MembershipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AnnualFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FallbackName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("ShowInOverview")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ClubId");

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.ToTable("MembershipTypes", (string)null);
                });

            modelBuilder.Entity("ClubEngine.ApiService.MembershipFees.MembershipFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MembershipTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("MemberId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("PeriodId");

                    b.ToTable("MembershipFees", (string)null);
                });

            modelBuilder.Entity("ClubEngine.ApiService.Slack.SlackUserMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementalKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementalKey"));

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SlackUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncrementalKey")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IncrementalKey"));

                    b.HasIndex("MemberId");

                    b.ToTable("SlackUserMapping");
                });

            modelBuilder.Entity("ClubEngine.ApiService.Clubs.Club", b =>
                {
                    b.HasBaseType("AppEngine.Partitions.Partition");

                    b.ToTable("Clubs", (string)null);

                    b.HasDiscriminator().HasValue("Club");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.Booking", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId");

                    b.HasOne("AppEngine.Accounting.Iso20022.Camt.PaymentsFile", "PaymentsFile")
                        .WithMany()
                        .HasForeignKey("PaymentsFileId");

                    b.Navigation("Partition");

                    b.Navigation("PaymentsFile");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.BookingAssignment", b =>
                {
                    b.HasOne("AppEngine.Accounting.Bookings.IncomingPayment", "IncomingPayment")
                        .WithMany("Assignments")
                        .HasForeignKey("IncomingPaymentId");

                    b.HasOne("AppEngine.Accounting.Bookings.OutgoingPayment", "OutgoingPayment")
                        .WithMany("Assignments")
                        .HasForeignKey("OutgoingPaymentId");

                    b.HasOne("AppEngine.Accounting.Bookings.BookingAssignment", "PaymentAssignment_Counter")
                        .WithMany()
                        .HasForeignKey("PaymentAssignmentId_Counter");

                    b.HasOne("AppEngine.Accounting.Bookings.PayoutRequest", "PayoutRequest")
                        .WithMany("Assignments")
                        .HasForeignKey("PayoutRequestId");

                    b.Navigation("IncomingPayment");

                    b.Navigation("OutgoingPayment");

                    b.Navigation("PaymentAssignment_Counter");

                    b.Navigation("PayoutRequest");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.IncomingPayment", b =>
                {
                    b.HasOne("AppEngine.Accounting.Bookings.Booking", "Booking")
                        .WithOne("Incoming")
                        .HasForeignKey("AppEngine.Accounting.Bookings.IncomingPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.OutgoingPayment", b =>
                {
                    b.HasOne("AppEngine.Accounting.Bookings.Booking", "Booking")
                        .WithOne("Outgoing")
                        .HasForeignKey("AppEngine.Accounting.Bookings.OutgoingPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.PayoutRequest", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("AppEngine.Accounting.Iso20022.Camt.PaymentsFile", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId");

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("AppEngine.Authorization.UsersInPartition.AccessRequests.AccessToPartitionRequest", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany("AccessRequests")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppEngine.Authentication.Users.User", "User_Requestor")
                        .WithMany()
                        .HasForeignKey("UserId_Requestor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppEngine.Authentication.Users.User", "User_Responder")
                        .WithMany()
                        .HasForeignKey("UserId_Responder");

                    b.Navigation("Partition");

                    b.Navigation("User_Requestor");

                    b.Navigation("User_Responder");
                });

            modelBuilder.Entity("AppEngine.Authorization.UsersInPartition.UserInPartition", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany("Users")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppEngine.Authentication.Users.User", "User")
                        .WithMany("Partitions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppEngine.Configurations.PartitionConfiguration", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany("Configurations")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("AppEngine.DomainEvents.PersistedDomainEvent", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId");

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("AppEngine.Mailing.ExternalMails.ExternalMail", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("AppEngine.MenuNodes.MenuNodeReadModel", b =>
                {
                    b.HasOne("AppEngine.Partitions.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("ClubEngine.ApiService.Clubs.Period", b =>
                {
                    b.HasOne("ClubEngine.ApiService.Clubs.Club", "Club")
                        .WithMany("Periods")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("ClubEngine.ApiService.Members.Member", b =>
                {
                    b.HasOne("ClubEngine.ApiService.Clubs.Club", "Club")
                        .WithMany("Members")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubEngine.ApiService.Members.Memberships.MembershipType", "CurrentMembershipType_ReadModel")
                        .WithMany()
                        .HasForeignKey("CurrentMembershipTypeId_ReadModel");

                    b.Navigation("Club");

                    b.Navigation("CurrentMembershipType_ReadModel");
                });

            modelBuilder.Entity("ClubEngine.ApiService.Members.Memberships.Membership", b =>
                {
                    b.HasOne("ClubEngine.ApiService.Members.Member", "Member")
                        .WithMany("Memberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubEngine.ApiService.Members.Memberships.MembershipType", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MembershipType");
                });

            modelBuilder.Entity("ClubEngine.ApiService.Members.Memberships.MembershipType", b =>
                {
                    b.HasOne("ClubEngine.ApiService.Clubs.Club", "Club")
                        .WithMany("MembershipTypes")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("ClubEngine.ApiService.MembershipFees.MembershipFee", b =>
                {
                    b.HasOne("ClubEngine.ApiService.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClubEngine.ApiService.Members.Memberships.MembershipType", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClubEngine.ApiService.Clubs.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MembershipType");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("ClubEngine.ApiService.Slack.SlackUserMapping", b =>
                {
                    b.HasOne("ClubEngine.ApiService.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.Booking", b =>
                {
                    b.Navigation("Incoming");

                    b.Navigation("Outgoing");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.IncomingPayment", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.OutgoingPayment", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("AppEngine.Accounting.Bookings.PayoutRequest", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("AppEngine.Authentication.Users.User", b =>
                {
                    b.Navigation("Partitions");
                });

            modelBuilder.Entity("AppEngine.Partitions.Partition", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("Configurations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ClubEngine.ApiService.Members.Member", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ClubEngine.ApiService.Clubs.Club", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("MembershipTypes");

                    b.Navigation("Periods");
                });
#pragma warning restore 612, 618
        }
    }
}
