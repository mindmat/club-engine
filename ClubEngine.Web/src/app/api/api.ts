//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class Api {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://localhost:7312";
    }

    accessRequestsOfPartition_Query(accessRequestsOfPartitionQuery: AccessRequestsOfPartitionQuery | undefined): Observable<AccessRequestOfPartition[]> {
        let url_ = this.baseUrl + "/api/AccessRequestsOfPartitionQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(accessRequestsOfPartitionQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccessRequestsOfPartition_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccessRequestsOfPartition_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccessRequestOfPartition[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccessRequestOfPartition[]>;
        }));
    }

    protected processAccessRequestsOfPartition_Query(response: HttpResponseBase): Observable<AccessRequestOfPartition[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AccessRequestOfPartition[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    bankAccountConfiguration_Query(bankAccountConfigurationQuery: BankAccountConfigurationQuery | undefined): Observable<BankAccountConfiguration> {
        let url_ = this.baseUrl + "/api/BankAccountConfigurationQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bankAccountConfigurationQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBankAccountConfiguration_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBankAccountConfiguration_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BankAccountConfiguration>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BankAccountConfiguration>;
        }));
    }

    protected processBankAccountConfiguration_Query(response: HttpResponseBase): Observable<BankAccountConfiguration> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BankAccountConfiguration;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    checkExternalMailConfiguration_Command(checkExternalMailConfigurationCommand: CheckExternalMailConfigurationCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/CheckExternalMailConfigurationCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(checkExternalMailConfigurationCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckExternalMailConfiguration_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckExternalMailConfiguration_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCheckExternalMailConfiguration_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    domainEventCatalog_Query(domainEventCatalogQuery: DomainEventCatalogQuery | undefined): Observable<DomainEventCatalogItem[]> {
        let url_ = this.baseUrl + "/api/DomainEventCatalogQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(domainEventCatalogQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDomainEventCatalog_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDomainEventCatalog_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DomainEventCatalogItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DomainEventCatalogItem[]>;
        }));
    }

    protected processDomainEventCatalog_Query(response: HttpResponseBase): Observable<DomainEventCatalogItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as DomainEventCatalogItem[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    externalMailConfiguration_Query(externalMailConfigurationQuery: ExternalMailConfigurationQuery | undefined): Observable<ExternalMailConfigurationDisplayItem[]> {
        let url_ = this.baseUrl + "/api/ExternalMailConfigurationQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(externalMailConfigurationQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExternalMailConfiguration_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExternalMailConfiguration_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExternalMailConfigurationDisplayItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExternalMailConfigurationDisplayItem[]>;
        }));
    }

    protected processExternalMailConfiguration_Query(response: HttpResponseBase): Observable<ExternalMailConfigurationDisplayItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ExternalMailConfigurationDisplayItem[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    importMemberList_Query(importMemberListQuery: ImportMemberListQuery | undefined): Observable<ListDifferences> {
        let url_ = this.baseUrl + "/api/upload/ImportMemberListQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(importMemberListQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportMemberList_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportMemberList_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ListDifferences>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ListDifferences>;
        }));
    }

    protected processImportMemberList_Query(response: HttpResponseBase): Observable<ListDifferences> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ListDifferences;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    importNewMembers_Command(importNewMembersCommand: ImportNewMembersCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/ImportNewMembersCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(importNewMembersCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportNewMembers_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportNewMembers_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportNewMembers_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    mapSlackUser_Command(mapSlackUserCommand: MapSlackUserCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/MapSlackUserCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(mapSlackUserCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMapSlackUser_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMapSlackUser_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processMapSlackUser_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    membershipFees_Query(membershipFeesQuery: MembershipFeesQuery | undefined): Observable<MembershipFeesList> {
        let url_ = this.baseUrl + "/api/MembershipFeesQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(membershipFeesQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMembershipFees_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMembershipFees_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MembershipFeesList>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MembershipFeesList>;
        }));
    }

    protected processMembershipFees_Query(response: HttpResponseBase): Observable<MembershipFeesList> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MembershipFeesList;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    membershipTypes_Query(membershipTypesQuery: MembershipTypesQuery | undefined): Observable<MembershipTypeItem[]> {
        let url_ = this.baseUrl + "/api/MembershipTypesQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(membershipTypesQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMembershipTypes_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMembershipTypes_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MembershipTypeItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MembershipTypeItem[]>;
        }));
    }

    protected processMembershipTypes_Query(response: HttpResponseBase): Observable<MembershipTypeItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MembershipTypeItem[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    members_Query(membersQuery: MembersQuery | undefined): Observable<MemberDisplayItem[]> {
        let url_ = this.baseUrl + "/api/MembersQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(membersQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMembers_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMembers_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MemberDisplayItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MemberDisplayItem[]>;
        }));
    }

    protected processMembers_Query(response: HttpResponseBase): Observable<MemberDisplayItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MemberDisplayItem[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    memberStats_Query(memberStatsQuery: MemberStatsQuery | undefined): Observable<MemberStats> {
        let url_ = this.baseUrl + "/api/MemberStatsQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(memberStatsQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMemberStats_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMemberStats_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MemberStats>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MemberStats>;
        }));
    }

    protected processMemberStats_Query(response: HttpResponseBase): Observable<MemberStats> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MemberStats;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    menuNodes_Query(menuNodesQuery: MenuNodesQuery | undefined): Observable<MenuNodeContent[]> {
        let url_ = this.baseUrl + "/api/MenuNodesQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(menuNodesQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMenuNodes_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMenuNodes_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MenuNodeContent[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MenuNodeContent[]>;
        }));
    }

    protected processMenuNodes_Query(response: HttpResponseBase): Observable<MenuNodeContent[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MenuNodeContent[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    myPartitions_Query(myPartitionsQuery: MyPartitionsQuery | undefined): Observable<MyPartitions> {
        let url_ = this.baseUrl + "/api/MyPartitionsQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(myPartitionsQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMyPartitions_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMyPartitions_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MyPartitions>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MyPartitions>;
        }));
    }

    protected processMyPartitions_Query(response: HttpResponseBase): Observable<MyPartitions> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MyPartitions;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    myRightsInPartition_Query(myRightsInPartitionQuery: MyRightsInPartitionQuery | undefined): Observable<string[]> {
        let url_ = this.baseUrl + "/api/MyRightsInPartitionQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(myRightsInPartitionQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMyRightsInPartition_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMyRightsInPartition_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processMyRightsInPartition_Query(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    partitionByAcronym_Query(partitionByAcronymQuery: PartitionByAcronymQuery | undefined): Observable<PartitionDetails> {
        let url_ = this.baseUrl + "/api/PartitionByAcronymQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(partitionByAcronymQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPartitionByAcronym_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPartitionByAcronym_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PartitionDetails>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PartitionDetails>;
        }));
    }

    protected processPartitionByAcronym_Query(response: HttpResponseBase): Observable<PartitionDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PartitionDetails;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    partitions_Query(partitionsQuery: PartitionsQuery | undefined): Observable<MyPartitions> {
        let url_ = this.baseUrl + "/public-api/PartitionsQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(partitionsQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPartitions_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPartitions_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MyPartitions>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MyPartitions>;
        }));
    }

    protected processPartitions_Query(response: HttpResponseBase): Observable<MyPartitions> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MyPartitions;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    paymentsByDay_Query(paymentsByDayQuery: PaymentsByDayQuery | undefined): Observable<BookingsOfDay[]> {
        let url_ = this.baseUrl + "/api/PaymentsByDayQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(paymentsByDayQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPaymentsByDay_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPaymentsByDay_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BookingsOfDay[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BookingsOfDay[]>;
        }));
    }

    protected processPaymentsByDay_Query(response: HttpResponseBase): Observable<BookingsOfDay[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BookingsOfDay[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    removeSlackUserMapping_Command(removeSlackUserMappingCommand: RemoveSlackUserMappingCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/RemoveSlackUserMappingCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(removeSlackUserMappingCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveSlackUserMapping_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveSlackUserMapping_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemoveSlackUserMapping_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    removeUserFromPartition_Command(removeUserFromPartitionCommand: RemoveUserFromPartitionCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/RemoveUserFromPartitionCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(removeUserFromPartitionCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveUserFromPartition_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveUserFromPartition_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemoveUserFromPartition_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    requestAccess_Command(requestAccessCommand: RequestAccessCommand | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/RequestAccessCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(requestAccessCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestAccess_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestAccess_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processRequestAccess_Command(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    respondToRequest_Command(respondToRequestCommand: RespondToRequestCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/RespondToRequestCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(respondToRequestCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRespondToRequest_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRespondToRequest_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRespondToRequest_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    roles_Query(rolesQuery: RolesQuery | undefined): Observable<RoleDescription[]> {
        let url_ = this.baseUrl + "/api/RolesQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(rolesQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRoles_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRoles_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleDescription[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleDescription[]>;
        }));
    }

    protected processRoles_Query(response: HttpResponseBase): Observable<RoleDescription[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RoleDescription[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    saveBankAccountConfiguration_Command(saveBankAccountConfigurationCommand: SaveBankAccountConfigurationCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/SaveBankAccountConfigurationCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(saveBankAccountConfigurationCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveBankAccountConfiguration_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveBankAccountConfiguration_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSaveBankAccountConfiguration_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    saveDomainEvent_Command(saveDomainEventCommand: SaveDomainEventCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/SaveDomainEventCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(saveDomainEventCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveDomainEvent_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveDomainEvent_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSaveDomainEvent_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    saveExternalMailConfiguration_Command(saveExternalMailConfigurationCommand: SaveExternalMailConfigurationCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/SaveExternalMailConfigurationCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(saveExternalMailConfigurationCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveExternalMailConfiguration_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveExternalMailConfiguration_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSaveExternalMailConfiguration_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    savePaymentFile_Command(savePaymentFileCommand: SavePaymentFileCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/upload/SavePaymentFileCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(savePaymentFileCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSavePaymentFile_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSavePaymentFile_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSavePaymentFile_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    setRoleOfUserInPartition_Command(setRoleOfUserInPartitionCommand: SetRoleOfUserInPartitionCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/SetRoleOfUserInPartitionCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(setRoleOfUserInPartitionCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetRoleOfUserInPartition_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetRoleOfUserInPartition_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetRoleOfUserInPartition_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    slackUserDifferences_Query(slackUserDifferencesQuery: SlackUserDifferencesQuery | undefined): Observable<SlackDifferences> {
        let url_ = this.baseUrl + "/api/SlackUserDifferencesQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(slackUserDifferencesQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSlackUserDifferences_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSlackUserDifferences_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SlackDifferences>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SlackDifferences>;
        }));
    }

    protected processSlackUserDifferences_Query(response: HttpResponseBase): Observable<SlackDifferences> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SlackDifferences;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    startUpdateReadModelsOfEvent_Command(startUpdateReadModelsOfEventCommand: StartUpdateReadModelsOfEventCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/StartUpdateReadModelsOfEventCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(startUpdateReadModelsOfEventCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartUpdateReadModelsOfEvent_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartUpdateReadModelsOfEvent_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStartUpdateReadModelsOfEvent_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    translation_Query(translationQuery: TranslationQuery | undefined): Observable<{ [key: string]: string; }> {
        let url_ = this.baseUrl + "/public-api/TranslationQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(translationQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTranslation_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTranslation_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: string; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: string; }>;
        }));
    }

    protected processTranslation_Query(response: HttpResponseBase): Observable<{ [key: string]: string; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as { [key: string]: string; };
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateReadModel_Command(updateReadModelCommand: UpdateReadModelCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UpdateReadModelCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateReadModelCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateReadModel_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateReadModel_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateReadModel_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateUserInfo_Command(updateUserInfoCommand: UpdateUserInfoCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UpdateUserInfoCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateUserInfoCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserInfo_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserInfo_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateUserInfo_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upsertMembershipFeesForPeriod_Command(upsertMembershipFeesForPeriodCommand: UpsertMembershipFeesForPeriodCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UpsertMembershipFeesForPeriodCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(upsertMembershipFeesForPeriodCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsertMembershipFeesForPeriod_Command(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsertMembershipFeesForPeriod_Command(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpsertMembershipFeesForPeriod_Command(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    usersOfPartition_Query(usersOfPartitionQuery: UsersOfPartitionQuery | undefined): Observable<UserInPartitionDisplayItem[]> {
        let url_ = this.baseUrl + "/api/UsersOfPartitionQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(usersOfPartitionQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersOfPartition_Query(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersOfPartition_Query(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserInPartitionDisplayItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserInPartitionDisplayItem[]>;
        }));
    }

    protected processUsersOfPartition_Query(response: HttpResponseBase): Observable<UserInPartitionDisplayItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UserInPartitionDisplayItem[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface AccessRequestOfPartition {
    id?: string;
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    avatarUrl?: string | null;
    requestReceived?: Date;
    requestText?: string | null;
}

export interface AccessRequestsOfPartitionQuery {
    partitionId?: string;
    includeDeniedRequests?: boolean;
}

export interface BankAccountConfiguration {
    iban?: string | null;
    accountHolderName?: string | null;
    accountHolderStreet?: string | null;
    accountHolderHouseNo?: string | null;
    accountHolderPostalCode?: string | null;
    accountHolderTown?: string | null;
    accountHolderCountryCode?: string | null;
}

export interface BankAccountConfigurationQuery {
    partitionId?: string;
}

export interface CheckExternalMailConfigurationCommand {
    partitionId?: string;
    externalMailConfigurationId?: string;
}

export interface DomainEventCatalogItem {
    typeName?: string | null;
    userText?: string;
}

export interface DomainEventCatalogQuery {
}

export interface ExternalMailConfigurationDisplayItem {
    id?: string;
    imapHost?: string | null;
    imapPort?: number;
    username?: string | null;
    passwordSet?: boolean;
    importMailsSince?: Date | null;
    checkSuccessful?: boolean | null;
    checkError?: string | null;
    totalImportedMails?: number;
    totalAssignedMails?: number;
}

export interface ExternalMailConfigurationQuery {
    partitionId?: string;
}

export interface ListDifferences {
    added?: ImportedMember[];
    modified?: ImportedMember[];
    deleted?: ImportedMember[];
}

export interface ImportedMember {
    id?: string;
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    membershipTypeId?: string;
    currentMembershipTypeId?: string | null;
    address?: string | null;
    zip?: string | null;
    town?: string | null;
    phone?: string | null;
    tags?: string[];
    from?: Date;
    until?: Date;
    plannedLeave?: string | null;
}

export interface ImportMemberListQuery {
    file?: FileUpload;
    partitionId?: string;
}

export interface FileUpload {
    contentType?: string;
    filename?: string;
    fileStream?: Stream;
}

export interface MarshalByRefObject {
}

export interface Stream extends MarshalByRefObject {
    canRead?: boolean;
    canWrite?: boolean;
    canSeek?: boolean;
    canTimeout?: boolean;
    length?: number;
    position?: number;
    readTimeout?: number;
    writeTimeout?: number;
}

export interface ImportNewMembersCommand {
    partitionId?: string;
    newMembers?: ImportedMember[] | null;
}

export interface MapSlackUserCommand {
    partitionId?: string;
    slackUserId?: string;
    memberId?: string;
}

export interface MembershipFeesList {
    paid?: FeeStateInPeriod[];
    due?: FeeStateInPeriod[];
}

export interface FeeStateInPeriod {
    memberId?: string;
    memberName?: string;
    amountExpected?: number;
    amountPaid?: number;
}

export interface MembershipFeesQuery {
    periodId?: string | null;
    partitionId?: string;
}

export interface MembershipTypeItem {
    id?: string;
    name?: string;
    color?: string | null;
    showInOverview?: boolean;
}

export interface MembershipTypesQuery {
    partitionId?: string;
}

export interface MemberDisplayItem {
    id?: string;
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    currentMembershipTypeId?: string | null;
}

export interface MembersQuery {
    partitionId?: string;
    membershipTypeIds?: (string | null)[] | null;
    searchString?: string | null;
}

export interface MemberStats {
    currentTotal?: number;
    currentCounts?: MemberCurrentCount[];
    memberCounts?: MemberCount[];
    inactiveCount?: number;
}

export interface MemberCurrentCount {
    membershipTypeId?: string;
    count?: number;
    name?: string;
    color?: string | null;
    showInOverview?: boolean;
}

export interface MemberCount {
    membershipTypeId?: string;
    name?: string;
    counts?: MembershipTypeCount[];
}

export interface MembershipTypeCount {
    date?: Date;
    count?: number;
}

export interface MemberStatsQuery {
    partitionId?: string;
}

export interface MenuNodeContent {
    key?: string;
    content?: string | null;
    style?: MenuNodeStyle | null;
    hidden?: boolean;
}

export enum MenuNodeStyle {
    None = 0,
    Info = 1,
    ToDo = 2,
    Important = 3,
}

export interface MenuNodesQuery {
    partitionId?: string;
}

export interface MyPartitions {
    authorized?: PartitionOfUser[];
    requests?: AccessRequest[];
    other?: PartitionDisplayItem[];
}

export interface PartitionOfUser {
    id?: string;
    name?: string;
    acronym?: string;
    role?: UserInPartitionRole;
    roleText?: string;
}

export enum UserInPartitionRole {
    None = 0,
    Reader = 1,
    Writer = 2,
    Admin = 3,
}

export interface AccessRequest {
    partitionId?: string;
    partitionName?: string;
    partitionAcronym?: string;
    requestSent?: Date;
}

export interface PartitionDisplayItem {
    id?: string;
    name?: string;
    acronym?: string;
}

export interface MyPartitionsQuery {
    searchString?: string | null;
    showArchived?: boolean;
}

export interface MyRightsInPartitionQuery {
    partitionId?: string;
}

export interface PartitionDetails {
    id?: string;
    name?: string;
    acronym?: string;
}

export interface PartitionByAcronymQuery {
    acronym?: string | null;
}

export interface PartitionsQuery {
    searchString?: string | null;
    showArchived?: boolean;
}

export interface BookingsOfDay {
    bookingDate?: Date;
    bookings?: PaymentDisplayItem[];
    balanceAfter?: number | null;
}

export interface PaymentDisplayItem {
    id?: string;
    typ?: CreditDebit | null;
    amount?: number;
    charges?: number | null;
    amountAssigned?: number;
    bookingDate?: Date;
    currency?: string | null;
    reference?: string | null;
    amountRepaid?: number | null;
    settled?: boolean;
    ignore?: boolean;
    message?: string | null;
    debitorName?: string | null;
    creditorName?: string | null;
    creditorIban?: string | null;
    balance?: number | null;
}

export enum CreditDebit {
    CRDT = 1,
    DBIT = 2,
}

export interface PaymentsByDayQuery {
    partitionId?: string;
    hideIgnored?: boolean;
    hideSettled?: boolean;
    hideIncoming?: boolean;
    hideOutgoing?: boolean;
    searchString?: string | null;
    showAll?: boolean;
}

export interface RemoveSlackUserMappingCommand {
    partitionId?: string;
    slackUserId?: string;
    memberId?: string;
}

export interface RemoveUserFromPartitionCommand {
    partitionId?: string;
    userId?: string;
}

export interface RequestAccessCommand {
    partitionId?: string;
    requestText?: string | null;
}

export interface RespondToRequestCommand {
    accessToEventRequestId?: string;
    partitionId?: string;
    response?: RequestResponse;
}

export enum RequestResponse {
    Granted = 1,
    Denied = 2,
}

export interface RoleDescription {
    role?: UserInPartitionRole;
    name?: string;
    description?: string;
}

export interface RolesQuery {
}

export interface SaveBankAccountConfigurationCommand {
    partitionId?: string;
    config?: BankAccountConfiguration | null;
}

export interface SaveDomainEventCommand {
    domainEventId?: string;
    domainEventId_Parent?: string | null;
    eventData?: string;
    partitionId?: string | null;
    eventType?: string;
}

export interface SaveExternalMailConfigurationCommand {
    partitionId?: string;
    configs?: ExternalMailConfigurationUpdateItem[] | null;
}

export interface ExternalMailConfigurationUpdateItem {
    id?: string;
    imapHost?: string | null;
    imapPort?: number;
    username?: string | null;
    password?: string | null;
    importMailsSince?: Date | null;
}

export interface SavePaymentFileCommand {
    partitionId?: string;
    file?: FileUpload;
}

export interface SetRoleOfUserInPartitionCommand {
    partitionId?: string;
    userId?: string;
    role?: UserInPartitionRole;
}

export interface SlackDifferences {
    onlyMember?: MemberDisplayItem[];
    onlySlack?: SlackUser[];
    matches?: SlackMatch[];
}

export interface SlackUser {
    id?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    isInvitedUser?: boolean;
}

export interface SlackMatch {
    member?: MemberDisplayItem;
    slack?: SlackUser;
}

export interface SlackUserDifferencesQuery {
    partitionId?: string;
    searchString?: string | null;
}

export interface StartUpdateReadModelsOfEventCommand {
    partitionId?: string | null;
    queryNames?: string[] | null;
}

export interface TranslationQuery {
    language?: string | null;
}

export interface UpdateReadModelCommand {
    partitionId?: string;
    queryName?: string;
    rowId?: string | null;
    dirtyMoment?: Date | null;
}

export interface UpdateUserInfoCommand {
    provider?: IdentityProvider;
    identifier?: string | null;
}

export enum IdentityProvider {
    Google = 1,
    Microsoft = 2,
    Auth0 = 3,
}

export interface UpsertMembershipFeesForPeriodCommand {
    partitionId?: string;
    periodId?: string;
}

export interface UserInPartitionDisplayItem {
    partitionId?: string;
    role?: UserInPartitionRole;
    roleText?: string;
    userEmail?: string | null;
    userId?: string;
    userDisplayName?: string;
    userAvatarUrl?: string | null;
}

export interface UsersOfPartitionQuery {
    partitionId?: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}